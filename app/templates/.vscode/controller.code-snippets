{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "typescript",
		"prefix": "controller",
		"body": [
			"import $2Service from '../../services/$1.service';",
			"import { Request, Response } from 'express';",

			"export class Controller {",
			"  all(req: Request, res: Response): void {",
			"    $2Service.all().then(r => res.json(r));",
			"  }",

			"  create(req: Request, res: Response): void {",
			"    $2Service.create($3).then(r =>",
			"      res",
			"         .status(201)",
			"         .location(`<%= apiRoot %>/$1/${r._id}`)",
			"         .json(r),",
			"    ).catch(err => ",
			"          res.status(503)",
			"          .json('Save error' + err)",
			"    );",
			"  }",
				
			"  byId(req: Request, res: Response): void {",
			"    $2Service.byId(req.params._id).then(r => res.json(r));",
			"  }",

			"  update(req: Request, res: Response): void {",
			"    $2Service.update(req.params._id, req.body).then(r => res.json(r));",
			"  }",

			"  delete(req: Request, res: Response): void {",
			"    $2Service.delete(req.params._id).then(r => res.json(r));",
			"  }",
			"}",

			"export default new Controller();",
		],
		"description": "Controller"
	}
}